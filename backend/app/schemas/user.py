# backend/app/schemas/user.py
"""
    DRKR API

    A sample OpenAPI specification for the DRKR project, covering all endpoint stubs across authentication, users, organizations, deep research items, tags, comments, ratings, research jobs, and search. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import json
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

from datetime import datetime
from pydantic import BaseModel, model_validator, StrictInt, StrictStr
from app.schemas.organization_member import OrganizationMember
from app.schemas._base_model import CustomBaseModel

class User(CustomBaseModel):
    """
    User
    """ # noqa: E501
    id: Optional[StrictInt] = None
    external_id: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = None
    default_role: Optional[StrictStr] = None
    auth_provider: Optional[StrictStr] = None
    picture_url: Optional[StrictStr] = None
    organization_memberships: Optional[List[OrganizationMember]] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    __properties: ClassVar[List[str]] = ["id", "external_id", "username", "email", "display_name", "default_role", "auth_provider", "picture_url", "organization_memberships", "created_at", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": False,
        "protected_namespaces": (),
        "from_attributes": True,
    }

    @model_validator(mode='before')
    @classmethod
    def validate_datetimes(cls, data: Dict[str, Any]) -> Dict[str, Any]:
        if isinstance(data, dict):
            for key, value in data.items():
                if isinstance(value, datetime):
                    data[key] = value.isoformat()
        else:
            if hasattr(data, 'created_at') and isinstance(data.created_at, datetime):
                data.created_at = data.created_at.isoformat()
            if hasattr(data, 'updated_at') and isinstance(data.updated_at, datetime):
                data.updated_at = data.updated_at.isoformat()
        return data

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))
