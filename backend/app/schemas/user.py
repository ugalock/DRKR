# backend/app/schemas/user.py
"""
    DRKR API

    A sample OpenAPI specification for the DRKR project, covering all endpoint stubs across authentication, users, organizations, deep research items, tags, comments, ratings, research jobs, and search. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import json
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

from datetime import datetime
from pydantic import BaseModel, model_validator, StrictInt, StrictStr
from app.schemas.organization_member import OrganizationMember

class User(BaseModel):
    """
    User
    """ # noqa: E501
    id: Optional[StrictInt] = None
    external_id: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = None
    default_role: Optional[StrictStr] = None
    auth_provider: Optional[StrictStr] = None
    picture_url: Optional[StrictStr] = None
    organization_memberships: Optional[List[OrganizationMember]] = None
    created_at: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "external_id", "username", "email", "display_name", "default_role", "auth_provider", "picture_url", "organization_memberships", "created_at", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
        "from_attributes": True,
    }

    @model_validator(mode='before')
    @classmethod
    def validate_datetimes(cls, data: Dict[str, Any]) -> Dict[str, Any]:
        if isinstance(data, dict):
            for key, value in data.items():
                if isinstance(value, datetime):
                    data[key] = value.isoformat()
        else:
            if hasattr(data, 'created_at') and isinstance(data.created_at, datetime):
                data.created_at = data.created_at.isoformat()
            if hasattr(data, 'updated_at') and isinstance(data.updated_at, datetime):
                data.updated_at = data.updated_at.isoformat()
        return data

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "external_id": obj.get("external_id"),
            "username": obj.get("username"),
            "email": obj.get("email"),
            "display_name": obj.get("display_name"),
            "default_role": obj.get("default_role"),
            "auth_provider": obj.get("auth_provider"),
            "picture_url": obj.get("picture_url"),
            "organization_memberships": obj.get("organization_memberships"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj
