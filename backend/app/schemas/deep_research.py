# coding: utf-8

"""
    DRKR API

    A sample OpenAPI specification for the DRKR project, covering all endpoint stubs across authentication, users, organizations, deep research items, tags, comments, ratings, research jobs, and search. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

from app.schemas._base_model import CustomBaseModel
from app.schemas.comment import Comment
from app.schemas.rating import Rating
from app.schemas.research_chunk import ResearchChunk
from app.schemas.research_summary import ResearchSummary
from app.schemas.research_source import ResearchSource
from app.schemas.research_auto_metadata import ResearchAutoMetadata
from app.schemas.research_job import ResearchJob

class DeepResearch(CustomBaseModel):
    """
    DeepResearch
    """ # noqa: E501
    id: StrictInt
    user_id: StrictInt
    owner_user_id: Optional[StrictInt] = None
    owner_org_id: Optional[StrictInt] = None
    visibility: StrictStr
    title: StrictStr
    prompt_text: StrictStr
    questions_and_answers: Optional[StrictStr] = None
    final_report: StrictStr
    model_name: Optional[StrictStr] = None
    model_params: Optional[Dict[str, Any]] = None
    source_count: Optional[StrictInt] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    chunks: Optional[List[ResearchChunk]] = None
    summaries: Optional[List[ResearchSummary]] = None
    sources: Optional[List[ResearchSource]] = None
    auto_metadata: Optional[List[ResearchAutoMetadata]] = None
    comments: Optional[List[Comment]] = None
    ratings: Optional[List[Rating]] = None  
    research_job: Optional[ResearchJob] = None
    __properties: ClassVar[List[str]] = ["id", "user_id", "owner_user_id", "owner_org_id", "visibility", "title", "prompt_text", "questions_and_answers", "final_report", "model_name", "model_params", "source_count", "created_at", "updated_at", "chunks", "summaries", "sources", "auto_metadata", "comments", "ratings", "research_job"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": False,
        "protected_namespaces": (),
        "from_attributes": True,
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))
